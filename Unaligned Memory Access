// For unaligned data access to generate an exception ; it is required for the CCR 3rd bit i.e. trap bit to be enabled
// The default unaligned memory access for Cortex M4 is done without any exception being returned

#include "stm32f4xx.h"
int main(void)
{
		SCB_Type *pSCB=SCB;                  // Pointer of type SCB_Type which is the name of the strcture for SCB 
																				 // pointer pSCB points to the base address of SCB
		pSCB ->SHCSR=pSCB ->SHCSR |( 1<<16);// Notation used to dereference the pointer pSCB and access the SHSCR register
		pSCB ->SHCSR=pSCB ->SHCSR |( 1<<16);// Set the 16,17 and 18th bit to 1 by or ops with 1 shifted to 16,17 and 18(memmanage,busfault and usagefault exceptions enabled)
		pSCB ->SHCSR=pSCB ->SHCSR |( 1<<16);// SHSCR is used to enable Exceptions by bit manipulation of the SHSCR register
	
    // set the 4th bit in CCR for returning an exception in case of unaligned data access
		pSCB->CCR |=(1<<3);
	
	 // Initiliase a pointer variable with address of RAM
	 uint32_t volatile *ptr=(uint32_t *) 0x20000001;  // keyword volatile forces the processor to generate code ; if not used NOP(no operation)
	 uint32_t volatile var=*ptr;							        // Loads the value of ptr i.e. the address 0x20000000 in var
	 var ++;
   
   // To resolve the unaligned access exception, the address can be bit aligned instead of word i.e. (uint8_t *)0x20000000
   
    return 0;
}
