// HCLK of frequency 50 MHz,84 MHz and 120 MHz

#include<string.h>
#include "stm32f4xx_hal.h"
#include "main.h"

#define TRUE 1
#define FALSE 0

UART_HandleTypeDef huart2;

RCC_OscInitTypeDef osc_init;
RCC_ClkInitTypeDef clk_init;


void UART2_Init(void);
void Error_handler(void);
void SystemClkConfig(uint8_t clk_freq);

char msg[100];
char msg2[100];
char msg3[100];
char msg4[100];


int main(void)
{
	HAL_Init();

	SystemClkConfig(SYS_CLK_FREQ_50_MHz);

	UART2_Init();

	// Print the values of the different clocks configured
	sprintf(msg,"SYSCLK : %ld\r\n",HAL_RCC_GetSysClockFreq());
	sprintf(msg2,"HCLK  : %ld\r\n",HAL_RCC_GetHCLKFreq());
	sprintf(msg3,"PCLK1 : %ld\r\n",HAL_RCC_GetPCLK1Freq());
	sprintf(msg4,"PCLK2  : %ld\r\n",HAL_RCC_GetPCLK2Freq());

	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)msg2,strlen(msg2),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)msg3,strlen(msg3),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)msg4,strlen(msg4),HAL_MAX_DELAY);
	while(1);

	return 0;
}




void UART2_Init(void)
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	if ( HAL_UART_Init(&huart2) != HAL_OK )
	{
		//There is a problem
		Error_handler();
	}


}

void SystemClkConfig(uint8_t clk_freq)
{
	// Initiliase Osc init
	osc_init.OscillatorType=RCC_OSCILLATORTYPE_HSI;
	osc_init.HSIState=RCC_HSI_ON;
	osc_init.HSICalibrationValue=16;
	osc_init.PLL.PLLState=RCC_PLL_ON;
	osc_init.PLL.PLLSource=RCC_PLLSOURCE_HSI;

	uint32_t Flatency =0;

	switch(clk_freq)
	{
		case SYS_CLK_FREQ_50_MHz:
		{
			osc_init.PLL.PLLM=16;
			osc_init.PLL.PLLN=100;
			osc_init.PLL.PLLP=2;
			osc_init.PLL.PLLR =2;
			osc_init.PLL.PLLQ=2;

			//clock initialization
			clk_init.ClockType=(RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_HCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);
			clk_init.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider=RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider=RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider=RCC_HCLK_DIV2;

			Flatency=FLASH_ACR_LATENCY_1WS;
			break;
		}
		case SYS_CLK_FREQ_84_MHz:
		{
			osc_init.PLL.PLLM=16;
			osc_init.PLL.PLLN=168;
			osc_init.PLL.PLLP=2;
			osc_init.PLL.PLLR =2;
			osc_init.PLL.PLLQ=2;

			//clock initialization
			clk_init.ClockType=(RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_HCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);
			clk_init.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider=RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider=RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider=RCC_HCLK_DIV2;

			Flatency=FLASH_ACR_LATENCY_2WS;
			break;

		}
		case SYS_CLK_FREQ_120_MHz:
		{
			osc_init.PLL.PLLM=16;
			osc_init.PLL.PLLN=240;
			osc_init.PLL.PLLP=2;
			osc_init.PLL.PLLR =2;
			osc_init.PLL.PLLQ=2;
			//clock initialization
			clk_init.ClockType=(RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_HCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);
			clk_init.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider=RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider=RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider=RCC_HCLK_DIV2;

			Flatency=FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:return;

	}
	if(HAL_RCC_OscConfig(&osc_init) !=HAL_OK)
		{
			Error_handler();
		}
	if(HAL_RCC_ClockConfig(&clk_init,Flatency)!=HAL_OK)
	{
		Error_handler();
	}

	// Systick Timer configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

}


void Error_handler(void)
{
	while(1);
}

