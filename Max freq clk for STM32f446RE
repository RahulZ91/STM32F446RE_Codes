// Run the STM32F446RE at 180 MHz(Hclock), PCLK1(45 MHz) and PCLK2(90 MHz)

/*
 * main.c
 *
 *  Created on: 02-Jun-2018
 *      Author: kiran
 */

#include<string.h>
#include "stm32f4xx_hal.h"
#include "main.h"

#define TRUE 1
#define FALSE 0

UART_HandleTypeDef huart2;

RCC_OscInitTypeDef osc_init;
RCC_ClkInitTypeDef clk_init;


void UART2_Init(void);
void Error_handler(void);
void SystemClkConfig_Max(void);

char msg[100];
char msg2[100];
char msg3[100];
char msg4[100];


int main(void)
{
	HAL_Init();

	SystemClkConfig_Max();

	UART2_Init();

	// Print the values of the different clocks configured
	sprintf(msg,"SYSCLK : %ld\r\n",HAL_RCC_GetSysClockFreq());
	sprintf(msg2,"HCLK  : %ld\r\n",HAL_RCC_GetHCLKFreq());
	sprintf(msg3,"PCLK1 : %ld\r\n",HAL_RCC_GetPCLK1Freq());
	sprintf(msg4,"PCLK2  : %ld\r\n",HAL_RCC_GetPCLK2Freq());

	HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)msg2,strlen(msg2),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)msg3,strlen(msg3),HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2,(uint8_t *)msg4,strlen(msg4),HAL_MAX_DELAY);
	while(1);

	return 0;
}




void UART2_Init(void)
{
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	if ( HAL_UART_Init(&huart2) != HAL_OK )
	{
		//There is a problem
		Error_handler();
	}


}

void SystemClkConfig_Max()
{
	// for max frequency the configuration is required to be done in the power control registers
	// the OVER DRIVE mode is ON and the POWER SCALE is 1

	// Clock enabled for the Power control
	__HAL_RCC_PWR_CLK_ENABLE();

	// Config the VoltageScale as 1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	// Turn on OVER DRIVE
	__HAL_PWR_OVERDRIVE_ENABLE();

	// Initiliaze Osc init
	osc_init.OscillatorType=RCC_OSCILLATORTYPE_HSE;
	osc_init.HSEState=RCC_HSE_BYPASS;
	osc_init.PLL.PLLState=RCC_PLL_ON;
	osc_init.PLL.PLLSource=RCC_PLLSOURCE_HSE;

	uint32_t Flatency =0;

	osc_init.PLL.PLLM=8;
	osc_init.PLL.PLLN=360;
	osc_init.PLL.PLLP=2;
	osc_init.PLL.PLLR =2;
	osc_init.PLL.PLLQ=2;

	if(HAL_RCC_OscConfig(&osc_init)!=HAL_OK)
	{
		Error_handler();
	}

	//clock initialization
	clk_init.ClockType=(RCC_CLOCKTYPE_SYSCLK |RCC_CLOCKTYPE_HCLK |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);
	clk_init.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;
	clk_init.AHBCLKDivider=RCC_SYSCLK_DIV1;
	clk_init.APB1CLKDivider=RCC_HCLK_DIV4;
	clk_init.APB2CLKDivider=RCC_HCLK_DIV2;

	Flatency=FLASH_ACR_LATENCY_5WS;

	if(HAL_RCC_ClockConfig(&clk_init,Flatency) !=HAL_OK)
	{
		Error_handler();
	}
}


void Error_handler(void)
{
	while(1);
}

